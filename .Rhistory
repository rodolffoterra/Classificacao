getwd()
´´´{r coleta}
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
str(dados)
Head(dados)
tail(dados)
```
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
str(dados)
Head(dados)
head(dados)
tail(dados)
View(dados)
Daos$id <- NULL
Dados$id <- NULL
dados$id <- NULL
View(dados)
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x=="M", "Maligno", "Benigno")})
Head(dados)
Head(dados)
(dados)
head(dados)
View(dados)
table(dados$diagnosis)
dados$diagnosis <- factor(dados$diagnosis, levels = c('Benigno', "Maligno", labels = c("Benigno", "Maligno")))
dados$diagnosis <- factor(dados$diagnosis, levels = c("Benigno", "Maligno"), labels = c("Benigno", "Maligno"))
dados$diagnosis <- factor(dados$diagnosis, levels = c('Benigno', "Maligno"), labels = c("Benigno", "Maligno")))
dados$diagnosis <- factor(dados$diagnosis, levels = c('Benigno', "Maligno"), labels = c("Benigno", "Maligno"))
str(dados$diagnosis)
str(dados$diagnosis)
round(porp.table(table(dados$diagnosis))*100, digts = 1)
round(prop.table(table(dados$diagnosis))*100, digts = 1)
round(prop.table(table(dados$diagnosis))*100, digits = 1)
hist(dados$diagnosis)
hist(dados$diagnosis, main = 'Histograma 1', xlab = 'Atraso de Voo')
ggplot(dados, aes(x=diagnosis))+ ggtitle('Tipo de Cancer') + xlab("cancer") +
goem_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
library(ggplot2)
ggplot(dados, aes(x=diagnosis))+ ggtitle('Tipo de Cancer') + xlab("cancer") +
goem_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
library(ggthemes)
ggplot(dados, aes(x=diagnosis))+ ggtitle('Tipo de Cancer') + xlab("cancer") +
goem_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
library(MASS)
ggplot(dados, aes(x=diagnosis))+ ggtitle('Tipo de Cancer') + xlab("cancer") +
goem_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
library(party)
ggplot(dados, aes(x=diagnosis))+ ggtitle('Tipo de Cancer') + xlab("cancer") +
goem_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
ggplot(dados, aes(x=diagnosis)) + ggtitle("Gender") + xlab("Sexo") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
detach("package:ggthemes", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:party", unload=TRUE)
ggplot(dados, aes(x=diagnosis)) + ggtitle("Gender") + xlab("Sexo") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
ggplot(dados, aes(x=diagnosis)) + ggtitle("Cander") + xlab("Tipo de Cancer") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
ggplot(dados, aes(x=diagnosis)) + ggtitle("Cander") + xlab("Tipo de Cancer") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
summary(dados[c("radius_mean", "area_mean", "smoothness_mean")])
summary(dados)
summary(dados[c("radius_mean", "area_mean", "smoothness_mean")])
normalizar <- function(x){
return ((x - min(x)) / (max(x) - min(x)))
}
normalizar(c(1, 2, 3, 4, 5))
normalizar(c(10, 20, 30, 40, 50))
dados_norm <- as.data.frame(lapply(dados[2:31], normalizar))
head(dados_norm)
library(class)
View(dados_norm)
split = sample.split(dados_norm$medv, SplitRation = 0.7)
split = sample.split(dados_norm, SplitRation = 0.7)
split = sample.split(dados_norm, SplitRation = 0.7)
library(MASS)
set.seed(101)
dados <- Boston
library(neuralnet)
maxs <- apply(dados, 2, max)
mins <- apply(dados, 2, min)
maxs
mins
dados_normalizados <- as.data.frame(scale(dados, center = mins, scale = maxs - mins))
head(dados_normalizados)
library(caTools)
split = sample.split(dados_normalizados$medv, SplitRatio = 0.70)
View(dados_normalizados)
split = sample.spViewlit(dados_normalizados, SplitRatio = 0.70)
split = sample.spViewlit(dados_normalizados$medv, SplitRatio = 0.70)
library(neuralnet)
split = sample.spViewlit(dados_normalizados$medv, SplitRatio = 0.70)
split = sample.split(dados_normalizados$medv, SplitRatio = 0.70)
split = sample.split(dados_normalizados, SplitRatio = 0.70)
split = sample.split(dados_norm, SplitRatio = 0.70)
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
dados_treino <- dados_norm[1:469, ]
dados_teste <- dados_norm[470:569, ]
dados_treino_labels <- dados[1:469, 1]
dados_teste_labels <- dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
length(dados_treino)
length(dados_teste)
dados_treino_labels <- dados[dados_treino, 1]
count(dados_treino)
View(dados_treino)
View(dados_teste)
View(dados_treino)
sun(ncol(dados_treino))
sun(dados_treino))
modelo_knn_vi <- knn(train = dados_treino,
test = dados_teste,
cl = 398,
k = 21)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = 398,
k = 21)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
ados_treino_labels
dados_treino <- dados_norm[1:469, ]
dados_teste <- dados_norm[470:569, ]
dados_treino_labels <- dados[1:469, 1]
dados_teste_labels <- dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
dados_treino_labels
dados_treino <- subset(dados_norm, split == TRUE)
dados_treino
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino,
k = 21)
?knn
split = sample.split(dados_norm, SplitRatio = 0.70)
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
View(dados_treino)
head(dados_norm)
dados_treino_labels <- subset(dados, split == TRUE)
dados_treino_labels
View(dados_treino_labels)
View(dados)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
split = sample.split(dados_norm, SplitRatio = 0.70)
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
dados_treino_labels <- subset(dados, split == TRUE)
View(dados_treino_labels)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados$id <- NULL
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x=="M", "Maligno", "Benigno")})
table(dados$diagnosis)
dados$diagnosis <- factor(dados$diagnosis, levels = c('Benigno', "Maligno"), labels = c("Benigno", "Maligno"))
str(dados$diagnosis)
round(prop.table(table(dados$diagnosis))*100, digits = 1)
View(dados_norm)
split = sample.split(dados_norm, SplitRatio = 0.70)
dados_treino <- subset(dados_norm, split == TRUE)
dados_teste <- subset(dados_norm, split = FALSE)
dados_treino_labels <- subset(dados, split == TRUE)
View(dados_treino_labels)
dados_norm <- as.data.frame(lapply(dados[1:31], normalizar))
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
dados_treino <- dados_norm[1:469, ]
dados_teste <- dados_norm[470:569, ]
dados_treino_labels <- dados[1:469, 1]
dados_teste_labels <- dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
summary(modelo_knn_v1)
library(gmodels)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = TRUE)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1)
dados_z <- as.data.frame(scale(dados[-1]))
summary(dados$area_mean)
dados_treino1 <- dados_z[1:469, ]
dados_teste1 <- dados_z[470:569, ]
dados_treino1_labels <- dados[1:469, 1]
dados_teste1_labels <- dados[470:569, 1]
modelo_knn_v2 <- knn(train = dados_treino1,
teste = dados_teste1,
cl = dados_treino1_labels,
k = 21)
dados_z <- as.data.frame(scale(dados[-1]))
summary(dados$area_mean)
dados_treino1 <- dados_z[1:469, ]
dados_teste1 <- dados_z[470:569, ]
dados_treino1_labels <- dados[1:469, 1]
dados_teste1_labels <- dados[470:569, 1]
modelo_knn_v2 <- knn(train = dados_treino1,
teste = dados_teste1,
cl = dados_treino1_labels,
k = 21)
modelo_knn_v2 <- knn(train = dados_treino1,
test = dados_teste1,
cl = dados_treino1_labels,
k = 21)
CrossTable(x = dados_teste1_labels, modelo_knn_v2, prop.chisq = FALSE)
modelo_knn_v2 <- knn(train = dados_treino1,
test = dados_teste1,
cl = dados_treino1_labels,
k = 20)
CrossTable(x = dados_teste1_labels, modelo_knn_v2, prop.chisq = FALSE)
modelo_knn_v2 <- knn(train = dados_treino1,
test = dados_teste1,
cl = dados_treino1_labels,
k = 19)
CrossTable(x = dados_teste1_labels, modelo_knn_v2, prop.chisq = FALSE)
modelo_knn_v2 <- knn(train = dados_treino1,
test = dados_teste1,
cl = dados_treino1_labels,
k = 35)
CrossTable(x = dados_teste1_labels, modelo_knn_v2, prop.chisq = FALSE)
modelo_knn_v2 <- knn(train = dados_treino1,
test = dados_teste1,
cl = dados_treino1_labels,
k = 21)
CrossTable(x = dados_teste1_labels, modelo_knn_v2, prop.chisq = FALSE)
dados1 <- read.csv('dataset.csv', stringsFactors = FALSE)
dados1 <- read.csv('dataset.csv', stringsFactors = FALSE)
dados1 <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados1$id <- NULL
dados[,'index'] <- ifelse(runif(nrow(dados)) < 0.8,1,1)
dados1[,'index'] <- ifelse(runif(nrow(dados)) < 0.8,1,1)
View(dados1)
head(dados1)
trainset <- dados1[dados1$index==1,]
testset <- dados1[dados1$index==0,]
# Obter o índice
trainColNum <- grep('index', names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[, -trainColNum]
# Obter índice de coluna da variável target no conjunto de dados
typeColNum <- grep('diag', names(dados1))
library(e1071)
modelo_svm_vi <- svm(diagnosis ~ .,
data = trainset,
type = "C-classification",
kernel = "radial")
pred_train <- pedict(modelo_svm_v1, trainset)
library(e1071)
modelo_svm_vi <- svm(diagnosis ~ .,
data = trainset,
type = "C-classification",
kernel = "radial")
pred_train <- pedict(modelo_svm_v1, trainset)
dados1 <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados1$id <- NULL
dados1[,'index'] <- ifelse(runif(nrow(dados)) < 0.8,1,1)
head(dados1)
trainset <- dados1[dados1$index==1,]
testset <- dados1[dados1$index==0,]
trainColNum <- grep('index', names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[, -trainColNum]
typeColNum <- grep('diag', names(dados1))
modelo_svm_vi <- svm(diagnosis ~ .,
data = trainset,
type = "C-classification",
kernel = "radial")
pred_train <- pedict(modelo_svm_v1, trainset)
pred_train <- predict(modelo_svm_v1, trainset)
pred_train <- predict(modelo_svm_v1, trainset)
dados1 <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados1$id = NULL
dados1[,'index'] <- ifelse(runif(nrow(dados1)) < 0.8,1,0)
View(dado1s)
trainset <- dados[dados$index==1,]
testset <- dados[dados$index==0,]
trainColNum <- grep('index', names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
typeColNum <- grep('diag',names(dados))
modelo_svm_v1 <- svm(diagnosis ~ .,
data = trainset,
type = 'C-classification',
kernel = 'radial')
pred_train <- predict(modelo_svm_v1, trainset)
mean(pred_train == trainset$diagnosis)
pred_test <- predict(modelo_svm_v1, testset)
mean(pred_test == testset$diagnosis)
table(pred_test, testset$diagnosis)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados$id = NULL
dados[,'index'] <- ifelse(runif(nrow(dados)) < 0.8,1,0)
View(dados)
trainset <- dados[dados$index==1,]
testset <- dados[dados$index==0,]
trainColNum <- grep('index', names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
typeColNum <- grep('diag',names(dados))
library(e1071)
modelo_svm_v1 <- svm(diagnosis ~ .,
data = trainset,
type = 'C-classification',
kernel = 'radial')
pred_train <- predict(modelo_svm_v1, trainset)
mean(pred_train == trainset$diagnosis)
pred_test <- predict(modelo_svm_v1, testset)
mean(pred_test == testset$diagnosis)
table(pred_test, testset$diagnosis)
dados1 <- read.csv("dataset.csv", stringsAsFactors = FALSE)
dados4$id = NULL
dados1[,'index'] <- ifelse(runif(nrow(dados1)) < 0.8,1,0)
View(dados1)
# Dados de treino e teste
trainset <- dados1[dados1$index==1,]
testset <- dados1[dados1$index==0,]
trainColNum <- grep('index', names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
typeColNum <- grep('diag',names(dados1))
library(e1071)
modelo_svm_v1 <- svm(diagnosis ~ .,
data = trainset,
type = 'C-classification',
kernel = 'radial')
pred_train <- predict(modelo_svm_v1, trainset)
mean(pred_train == trainset$diagnosis)
pred_test <- predict(modelo_svm_v1, testset)
mean(pred_test == testset$diagnosis)
table(pred_test, testset$diagnosis)
library(rpart)
modelo_rf_v1 = rpart(diagnosis ~ ., data = trainset, control = rpart.control(cp = .0005))
tree_pred = predict(modelo_rf_v1, testset, type='class')
mean(tree_pred==testset$diagnosis)
table(tree_pred, testset$diagnosis)
getwd()
getwd()
Views(dados)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
View(dados)
dados <- read.csv("dataset.csv", stringsAsFactors = FALSE)
# Percentual de previsões corretas com dataset de teste
mean(tree_pred==testset$diagnosis)
dados$id <- NULL
dados$id <- NULL
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x=="M", "Maligno", "Benigno")})
dados$diagnosis = sapply(dados$diagnosis, function(x){ifelse(x=="M", "Maligno", "Benigno")})
table(dados$diagnosis)
dados$diagnosis <- factor(dados$diagnosis, levels = c('Benigno', "Maligno"), labels = c("Benigno", "Maligno"))
str(dados$diagnosis)
round(prop.table(table(dados$diagnosis))*100, digits = 1)
